{{{

pyp is a python-centric command line text manipulation tool.  It allows you to format, replace, augment                                                                            
and otherwise mangle text using standard python syntax with a few golden-oldie tricks from unix commands                                                                           
of the past. You can pipe data into pyp or cut and paste text, and then hit ctrl-D to get your input into pyp.                                                                     
                                                                                                                                                                                   
After it's in, you can use the standard repetoire of python commands to modify the text. The key variables                                                                         
are "p", which represents EACH LINE of the input as a PYTHON STRING.  and "pp", which represents ALL of the                                                                        
inputs as a PYTHON ARRAY.                                                                                                                                                          
                                                                                                                                                                                   
You can pipe data WITHIN a pyp statement using standard unix style pipes ("|"), where "p" now represents the                                                                       
evaluation of the python statement before the "|". You can also refer back to the ORIGINAL, unadulterated                                                                          
input using the variable "o" or "original" at any time...and the variable "h" or "history" allows you                                                                              
to refer back to ANY subresult generated between pipes ("|").                                                                                                                      
                                                                                                                                                                                   
All pyp statements should be enclosed in double quotes, with single quotes being used to enclose any strings.                                                                      
                                                                                                                                                                                   
     echo 'FOO IS AN ' | pyp "p.replace('FOO','THIS') | p + 'EXAMPLE'"                                                                                                             
       ==> THIS IS AN EXAMPLE                                                                                                                                                      
                                                                                                                                                                                   
Splitting texton metacharacters is often critical for picking out particular fields of interest,                                                                                   
so common SPLITS and JOINS have been assigned variables. For example, "underscore" or "u" will split a string                                                                      
to an array based on undercores ("_"), while "underscore" or "u" will ALSO join an array with underscores ("_")                                                                    
back to a string.                                                                                                                                                                  
                                                                                                                                                                                   
Here are a few key split/join variables; run with --manual for all variable and see examples below in the string section.                                                          
                                                                                                                                                                                   
    s OR slash           splits AND joins on "/"                                                                                                                                   
    u OR underscore      splits AND joins on "_"                                                                                                                                   
    w OR whitespace      splits on whitespace (spaces,tabs,etc) AND joins with spaces                                                                                              
    a OR all             splits on ALL metacharacters [!@#$%^&*()...] AND joins with spaces                }}}