==enter the pyed piper==
pyp is a python-centric command line text manipulation tool.  It allows you to format, replace, augment                                                                            
and otherwise mangle text using standard python syntax with a few golden-oldie tricks from unix commands                                                                           
of the past. You can pipe data into pyp just like any other unix command line tool.
                                                                 
                                                                                 
After it's in, you can use the standard repertoire of python string and list methods to modify the text. 

All pyp statements should be enclosed in double quotes, with single quotes being used to enclose any strings.          

==p is key==
The key variables                                                                         
are "p", which represents EACH LINE of the input as a PYTHON STRING.  So to replace FOO with GOO in every line of the input you can use this:

*pyp "p.replace('FOO','GOO')"*

The other key variable is  "pp", which represents ALL of the                  inputs as a PYTHON LIST...allowing you to, for example sort the input like this:

*pyp "pp.sort()"*                             


==piping python through pipes==                                                                            
                                                                                                                                                                         
You can pipe data WITHIN a pyp statement using standard unix style pipes ("|"), where "p" now represents the                                                                       
evaluation of the python statement before the "|".                                                                      
                                                                                                                                                                                                                                                                                                                                                           
     *echo 'FOO IS AN ' | pyp "p.replace('FOO','THIS') | p + 'EXAMPLE'"*                                                                                                             
       *>THIS IS AN EXAMPLE*
==splitting up is easy to do==                                                                                    
Splitting text on metacharacters is often critical for picking out particular fields of interest,                                                                                   
so common SPLITS and JOINS have been assigned variables. For example, "underscore" or "u" will split a string                                                                      
to an array based on undercores ("_"), while "underscore" or "u" will ALSO join an array with underscores ("_")                                                                    
back to a string.                                                                                                                                                                  
                                                                                                                                                                                   
Here are a few key split/join variables; run with --manual for all variable and see examples below in the string section.                                                          
                                                                                                                                                                                   
    s OR slash           splits AND joins on "/"                                                                               

                                                   
    u OR underscore      splits AND joins on "_"                                                                                                                                   

    w OR whitespace      splits on whitespace (spaces,tabs,etc) AND joins with spaces                                                                             

                 
    a OR all             splits on ALL metacharacters [!@#$%^&()...] AND joins with spaces                                                                                        
                                                                                                                                                                                  
EXAMPLES:                                                                                                                                                                  

------------------------------------------------------------------------------                                                                                        

             
              List Operations              # all python list methods work                                                                               

                           
------------------------------------------------------------------------------                                                                                        

             
print all lines                              ==> pyp  "pp"                                                                               

                                          
sort all input lines                         ==> pyp  "pp.sort()"                                                                        

                                          
eliminate duplicates                         ==> pyp  "pp.uniq"                                                                          

                                          
combine all lines to one line                ==> pyp  "pp.oneline"                                                                       

                                          
print line after FOO                         ==> pyp  "pp.after('FOO')"                                                                  

                                          
list comprehenision                          ==> pyp  "[x for x in pp]"                                                                               

                             
return to string context after sort          ==> pyp  "pp.sort() | p"                                                                                 

                             
                                                                                                                                                                                   
-------------------------------------------------------------------------------                                                                                       

             
            String Operations               # all python str methods work                                                                               

                           
-------------------------------------------------------------------------------                                                                                       

             
print line                                   ==> pyp  "p"                                                                                                                          


combine line with FOO                        ==> pyp  "p +'FOO'"                                                                                                                   

above, but combine with original input       ==> pyp  "p +'FOO'| p + o"                                                                                                            
                                                                                                                                                                      

             
replace FOO with GOO                         ==> pyp  "p.replace('FOO','GOO')"                                                                                                     

remove all GOO                               ==> pyp  "p.kill('GOO')"                                                                                                              

                                                                                                                                                                                   

string substitution                          ==> pyp  "'%s FOO %s %s GOO'%(p,p,5)"                                                                                                 
                                                                                                                                                                                   
split up line by FOO                         ==> pyp  "p.split('FOO')"                                                                   

                                          
split up line by '/'                         ==> pyp  "slash"                                                                                                                      

select 1st field split up by '/'             ==> pyp  "slash[0]"                                                                                                                   

select fields 3 through 5 split up by '/'    ==> pyp  "s[2:6]"                                                                                                                     

above joined together with '/'               ==> pyp  "s[2:6] | s"                                                                                                                 
                                                                                                                                                                                   
-------------------------------------------------------------------------------                                                                                       

             
            Logic Filters                   # all python Booleon methods work                                                                                                      
-------------------------------------------------------------------------------                                                                                       

             

keep all lines with GOO and FOO              ==> pyp  "'GOO' in p and 'FOO' in p"                                                                                                  

keep all lines with GOO or FOO               ==> pyp  "keep('GOO','FOO')"                                                                                                          

keep all lines that are numbers              ==> pyp  "p.isdigit()"                                                                                                                
                                                                                                                                                                      

             
lose all lines with GOO and FOO              ==> pyp  "'GOO' not in p and 'FOO' not in p"                                                                                          
lose all lines with GOO or FOO               ==> pyp  "lose('GOO','FOO')"                                                                                                          
lose all lines that are numbers              ==> pyp  "not p.isdigit()"                                                                                                            
                                                                                                     