#summary One-sentence summary of this page.

= Introduction =

Add your content here.
There are three ways that you can bring in strings
<pre><table width="820" align="left" style="background-color: #d6d6d6" height="110" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 1</b> - Using Echo</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $ echo 'hello world' | pyp </b></p>
<p>       hello world </p>
<p><b>   $ pyp -r </b></p>
<p>       hello world </p>
</font></td></tr></tbody></table></pre>

<pre><table width="820" align="left" style="background-color: #d6d6d6" height="145" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 2</b> - Using Files</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $ cat /shots/psr/home/src/training/pyp/text_files/exercise_1 | pyp </b></p>
<p>       hello world </p>
<p>       world hello </p>
<p><b>   $ pyp -r "p"</b></p>
<p>       hello world </p>
<p>       world hello </p>
</font></td></tr></tbody></table></pre>

*PYP NOTE:* In this example you don't have to use "p" but its important to show that "p" represents the line in which it is working on.  So pyp is doing a recursive Read for p (or reading each line).  This is extremely important when you need to specify the variable from other variables.

<pre><table width="820" align="left" style="background-color: #d6d6d6" height="110" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 3</b> - Using pyp manually by typing/pasting text</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $ pyp </b></p>
<p>       hello world </p>
<p><b>   $ pyp -r </b></p>
<p>       hello world </p>
</font></td></tr></tbody></table></pre>

*Note: All three examples can accomplish the exact same thing.  Most times its easier to do pyp manually so you don't have to create a text file.*

---+++ Splitting with Pyed Piper

Pyed Piper has the ability to split on specific characters.  It has built in functions designed to easily split on specific characters (ie - slashes, dashes, spaces, etc) or you can manually set what you want to split on.  *Note: You don't have to necessarily split on one character.* 

<pre><table width="820" align="left" style="background-color: #d6d6d6" height="450" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 1</b> - Splitting on slashes</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $ cat  /shots/psr/home/src/training/pyp/text_files/exercise_2 | pyp </b></p>
<p>        /shots/grn/tb0120/pix/mov/2011_05_20/tb0120-grn-111329_qtpj8.1000_1180.mov  </p>
<p>        /shots/grn/tb0120/pix/out/tb0120_comp_v57/2kfa_lg10_dpx/tb0120,tb0121_comp_v57_2kfa_lg10.1001-1180@.dpx  </p>
<p>        /shots/grn/tb0120/pix/mov/2011_05_20/Cool Movie:hal-flight.mov </p>
<p><b>   $ pyp -r "s[:]" </b></p>
<p>        [<b>[0]</b>shots<b>[1]</b>grn<b>[2]</b>tb0120<b>[3]</b>pix<b>[4]</b>mov<b>[5]</b>2011_05_20<b>[6]</b>tb0120-grn-111329_qtpj8.1000_1180.mov] </p>
<p>        [<b>[0]</b>shots<b>[1]</b>grn<b>[2]</b>tb0120<b>[3]</b>pix<b>[4]</b>out<b>[5]</b>tb0120_comp_v57<b>[6]</b>2kfa_lg10_dpx<b>[7]</b>tb0120,tb0121_comp_v57_2kfa_lg10.1001-1180@.dpx] </p>
<p>        [<b>[0]</b>shots<b>[1]</b>grn<b>[2]</b>tb0120<b>[3]</b>pix<b>[4]</b>mov<b>[5]</b>2011_05_20<b>[6]</b>Cool Movie:hal-flight.mov]</p>
<p><b>   $ pyp -r "s[1]" </b></p>
<p>        grn </p>
<p>        grn </p>
<p>        grn </p>
<p><b>   $ pyp -r "s[-1]" </b></p>
<p>        tb0120-grn-111329_qtpj8.1000_1180.mov </p>
<p>        tb0120,tb0121_comp_v57_2kfa_lg10.1001-1180@.dpx </p>
<p>        Cool Movie:hal-flight.mov </p>
<p><b>   $ pyp -r "s[2:4]" </b></p>
<p>        [<b>[0]</b>tb0120<b>[1]</b>pix<b>[2]</b>mov] </p>
<p>        [<b>[0]</b>tb0120<b>[1]</b>pix<b>[2]</b>out] </p>
<p>        [<b>[0]</b>tb0120<b>[1]</b>pix<b>[2]</b>mov] </p>
<p><b>   $ pyp -r "s[2:4] | s" </b></p>
<p>        tb0120/pix/mov </p>
<p>        tb0120/pix/out </p>
<p>        tb0120/pix/mov </p>
</font></td></tr></tbody></table></pre>

*PYP NOTE:* With Pyed Piper you can split exactly like python's interpreter.  What the "s" variable is doing is splitting all slashes and putting them into a list for you to use.  For more information feel free to go here:  http://docs.python.org/release/2.5.2/lib/string-methods.html

<pre><table width="820" align="left" style="background-color: #d6d6d6" height="220" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 2</b> - Splitting on spaces</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $ cat /shots/psr/home/src/training/pyp/text_files/exercise_2 | pyp -r "a[:]" </b></p>
<p>        [<b>[0]</b>/shots/grn/tb0120/pix/mov/2011_05_20/tb0120-grn-111329_qtpj8.1000_1180.mov] </p>
<p>        [<b>[0]</b>/shots/grn/tb0120/pix/out/tb0120_comp_v57/2kfa_lg10_dpx/tb0120,tb0121_comp_v57_2kfa_lg10.1001-1180@.dpx] </p>
<p>        [<b>[0]</b>/shots/grn/tb0120/pix/mov/2011_05_20/Cool<b>[1]</b>Movie:hal-flight.mov] </p>
<p><b>   $ pyp -r "a[1]" </b></p>
<p>        Movie:hal-flight.mov </p>
<p><b>   $ pyp -r "a[:] | u" </b></p>
<p>        /shots/grn/tb0120/pix/mov/2011_05_20/tb0120-grn-111329_qtpj8.1000_1180.mov </p>
<p>        /shots/grn/tb0120/pix/out/tb0120_comp_v57/2kfa_lg10_dpx/tb0120,tb0121_comp_v57_2kfa_lg10.1001-1180@.dpx </p>
<p>        /shots/grn/tb0120/pix/mov/2011_05_20/<b>Cool_Movie:hal-flight.mov </b></p>
</font></td></tr></tbody></table></pre>

*PYP NOTE:* Because there was only one line with [1] space, when you specify to bring back [1], it will only give you the lines that have that list number.  You also have the ability to pipe it back in with the same or different variable type (we split on spaces and piped it back in but replaced all the spaces with underscores).  Although there was only one line that needed a space replaced with underscores, pyp still brings back everything when you pipe it back.   

<pre><table width="820" align="left" style="background-color: #d6d6d6" height="120" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 3</b> - Splitting on dot</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $ cat /shots/psr/home/src/training/pyp/text_files/exercise_2 | pyp -r "d" </b></p>
<p>        [<b>[0]</b>/shots/grn/tb0120/pix/mov/2011_05_20/tb0120-grn-111329_qtpj8<b>[1]</b>1000_1180<b>[2]</b>mov] </p>
<p>        [<b>[0]</b>/shots/grn/tb0120/pix/out/tb0120_comp_v57/2kfa_lg10_dpx/tb0120,tb0121_comp_v57_2kfa_lg10<b>[1]</b>1001-1180@[2]dpx] </p>
<p>        [<b>[0]</b>/shots/grn/tb0120/pix/mov/2011_05_20/Cool Movie:hal-flight<b>[1]</b>mov] </p>
</font></td></tr></tbody></table></pre>

*PYP NOTE:* If you notice in the last example we had changed the spaces to underscores but in this example its back to spaces.  The reason this happened is because pyp only keeps what is in buffer or temp database.  Also, with pyp you don't always have to use "[:]" to get a list of splits.  In this example we just put "d" and it automatically split out all dots.  

<pre><table width="820" align="left" style="background-color: #d6d6d6" height="120" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 4</b> - Splitting on underscores</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $ cat /shots/psr/home/src/training/pyp/text_files/exercise_2 | pyp -r "u"  </b></p>
<p>       [<b>[0]</b>/shots/grn/tb0120/pix/mov/2011<b>[1]</b>05<b>[2]</b>20/tb0120-grn-111329<b>[3]</b>qtpj8.1000<b>[4]</b>1180.mov]</p>
<p>       [<b>[0]</b>/shots/grn/tb0120/pix/out/tb0120<b>[1]</b>comp<b>[2]</b>v57/2kfa<b>[3]</b>lg10<b>[4]</b>dpx/tb0120,tb0121<b>[5]</b>comp<b>[6]</b>v57<b>[7]</b>2kfa<b>[8]</b>lg10.1001-1180@.dpx]</p>
<p>       [<b>[0]</b>/shots/grn/tb0120/pix/mov/2011<b>[1]</b>05<b>[2]</b>20/Cool Movie:hal-flight.mov]</p>
</font></td></tr></tbody></table></pre>


<pre><table width="820" align="left" style="background-color: #d6d6d6" height="120" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 5</b> - Splitting on colons</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $ cat /shots/psr/home/src/training/pyp/text_files/exercise_2 | pyp -r "l" </b></p>
<p>       [<b>[0]</b>/shots/grn/tb0120/pix/mov/2011_05_20/tb0120-grn-111329_qtpj8.1000_1180.mov]</p>
<p>       [<b>[0]</b>/shots/grn/tb0120/pix/out/tb0120_comp_v57/2kfa_lg10_dpx/tb0120,tb0121_comp_v57_2kfa_lg10.1001-1180@.dpx]</p>
<p>       [<b>[0]</b>/shots/grn/tb0120/pix/mov/2011_05_20/Cool Movie<b>[1]</b>hal-flight.mov]</p>
</font></td></tr></tbody></table></pre>

<pre><table width="820" align="left" style="background-color: #d6d6d6" height="120" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 6</b> - Splitting on dashes</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $ cat /shots/psr/home/src/training/pyp/text_files/exercise_2 | pyp -r "i" </b></p>
<p>       [<b>[0]</b>/shots/grn/tb0120/pix/mov/2011_05_20/tb0120<b>[1]</b>grn<b>[2]</b>111329_qtpj8.1000_1180.mov]</p>
<p>       [<b>[0]</b>/shots/grn/tb0120/pix/out/tb0120_comp_v57/2kfa_lg10_dpx/tb0120,tb0121_comp_v57_2kfa_lg10.1001<b>[1]</b>1180@.dpx]</p>
<p>       [<b>[0]</b>/shots/grn/tb0120/pix/mov/2011_05_20/Cool Movie:hal<b>[1]</b>flight.mov]</p>
</font></td></tr></tbody></table></pre>

<pre><table width="820" align="left" style="background-color: #d6d6d6" height="120" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 7</b> - Splitting on commas</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $ cat /shots/psr/home/src/training/pyp/text_files/exercise_2 | pyp -r "m"  </b></p>
<p>       [<b>[0]</b>/shots/grn/tb0120/pix/mov/2011_05_20/tb0120-grn-111329_qtpj8.1000_1180.mov]</p>
<p>       [<b>[0]</b>/shots/grn/tb0120/pix/out/tb0120_comp_v57/2kfa_lg10_dpx/tb0120<b>[1]</b>tb0121_comp_v57_2kfa_lg10.1001-1180@.dpx]</p>
<p>       [<b>[0]</b>/shots/grn/tb0120/pix/mov/2011_05_20/Cool Movie:hal-flight.mov]</p>
</font></td></tr></tbody></table></pre>

<pre><table width="820" align="left" style="background-color: #d6d6d6" height="120" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 8</b> - Splitting on metacharacters</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $  cat /shots/psr/home/src/training/pyp/text_files/exercise_2 | pyp -r "e" </b></p>
<p>       [<b>[0]</b>shots<b>[1]</b>grn<b>[2]</b>tb0120<b>[3]</b>pix<b>[4]</b>mov<b>[5]</b>2011<b>[6]</b>05<b>[7]</b>20<b>[8]</b>tb0120<b>[9]</b>grn<b>[10]</b>111329<b>[11]</b>qtpj8<b>[12]</b>1000<b>[13]</b>1180<b>[14]</b>mov]</p>
<p>       [<b>[0]</b>shots<b>[1]</b>grn<b>[2]</b>tb0120<b>[3]</b>pix<b>[4]</b>out<b>[5]</b>tb0120<b>[6]</b>comp<b>[7]</b>v57<b>[8]</b>2kfa<b>[9]</b>lg10<b>[10]</b>dpx<b>[11]</b>tb0120<b>[12]</b>tb0121<b>[13]</b>comp<b>[14]</b>v57<b>[15]</b>2kfa<b>[16]</b>lg10<b>[17]</b>1001<b>[18]</b>1180<b>[19]</b>dpx]</p>
<p>       [<b>[0]</b>shots<b>[1]</b>grn<b>[2]</b>tb0120<b>[3]</b>pix<b>[4]</b>mov<b>[5]</b>2011<b>[6]</b>05<b>[7]</b>20<b>[8]</b>Cool<b>[9]</b>Movie<b>[10]</b>hal<b>[11]</b>flight<b>[12]</b>mov]</p>
</font></td></tr></tbody></table></pre>

<pre><table width="820" align="left" style="background-color: #d6d6d6" height="190" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 9</b> - Splitting manually</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $ cat /shots/psr/home/src/training/pyp/text_files/exercise_2 | pyp -r  "p.split('grn')" </b></p>
<p>       [<b>[0]</b>/shots/<b>[1]</b>/tb0120/pix/mov/2011_05_20/tb0120-<b>[2]</b>-111329_qtpj8.1000_1180.mov]</p>
<p>       [<b>[0]</b>/shots/<b>[1]</b>/tb0120/pix/out/tb0120_comp_v57/2kfa_lg10_dpx/tb0120,tb0121_comp_v57_2kfa_lg10.1001-1180@.dpx]</p>
<p>       [<b>[0]</b>/shots/<b>[1]</b>/tb0120/pix/mov/2011_05_20/Cool Movie:hal-flight.mov]</p>
<p><b>   $  cat /shots/psr/home/src/training/pyp/text_files/exercise_2 | pyp -r  "p.split('/')" </b></p>
<p>       [<b>[0]</b><b>[1]</b>shots<b>[2]</b>grn<b>[3]</b>tb0120<b>[4]</b>pix<b>[5]</b>mov<b>[6]</b>2011_05_20<b>[7]</b>tb0120-grn-111329_qtpj8.1000_1180.mov]</p>
<p>       [<b>[0]</b><b>[1]</b>shots<b>[2]</b>grn<b>[3]</b>tb0120<b>[4]</b>pix<b>[5]</b>out<b>[6]</b>tb0120_comp_v57<b>[7]</b>2kfa_lg10_dpx<b>[8]</b>tb0120,tb0121_comp_v57_2kfa_lg10.1001-1180@.dpx]</p>
<p>       [<b>[0]</b><b>[1]</b>shots<b>[2]</b>grn<b>[3]</b>tb0120<b>[4]</b>pix<b>[5]</b>mov<b>[6]</b>2011_05_20<b>[7]</b>Cool Movie:hal-flight.mov]</p>
</font></td></tr></tbody></table></pre>

*PYP NOTE:* Spliting manually allows you to put anything in as long as it is a string; however, you will need to use single quotes (double quotes will not work in this case).  The letter 'p' represents the line in which it is looking at so when you go p.split('$STRING') you are saying for that line split on this string type.

*NOTE: You can also split on "\n" with the variable "r"

---+++ Splitting and Joining with Pyed Piper
With Pyed Piper you have the ablity to split and join a number of ways. 

<pre><table width="820" align="left" style="background-color: #d6d6d6" height="150" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 1</b> - Splitting and Joining using variables</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $ cat /shots/psr/home/src/training/pyp/text_files/exercise_3 | pyp </b></p>
<p>      [<b>[0]</b>homedirs<b>[1]</b>swinters<b>[2]</b>LightingProjects<b>[3]</b>Project1<b>[4]</b>tutorial4_1_no_lgts_v1.mb] </p>
<p>      [<b>[0]</b>homedirs<b>[1]</b>swinters<b>[2]</b>LightingProjects<b>[3]</b>Project1<b>[4]</b>tutorial4_no_lgts_v6.mb] </p>
<p><b>   $  cat /shots/psr/home/src/training/pyp/text_files/exercise_3 | pyp -r  "s | u" </b></p>
<p>      homedirs_swinters_LightingProjects_Project1_tutorial4_1_no_lgts_v1.mb </p>
<p>      homedirs_swinters_LightingProjects_Project1_tutorial4_no_lgts_v6.mb </p>
</font></td></tr></tbody></table></pre>

*PYP NOTE:* If you notice in this example we used the two variables (slashes and underscores) to signify what we want to split and join on.  By piping into the other variable we are telling pyp that we are wanting to split on slashes but pipe it back and add underscores with each list item.

<pre><table width="820" align="left" style="background-color: #d6d6d6" height="150" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 2</b> - Specific Splitting/Joining</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $  cat /shots/psr/home/src/training/pyp/text_files/exercise_3 | pyp -r   " '_'.join(p.split('/')) " </b></p>
<p>      homedirs_swinters_LightingProjects_Project1_tutorial4_1_no_lgts_v1.mb </p>
<p>      homedirs_swinters_LightingProjects_Project1_tutorial4_no_lgts_v6.mb </p>
<p><b>   $  cat /shots/psr/home/src/training/pyp/text_files/exercise_3 | pyp -r  "'HELLO'.join(p.split('Project'))" </b></p>
<p>      /homedirs/swinters/LightingHELLOs/HELLO1/tutorial4_1_no_lgts_v1.mb </p>
<p>      /homedirs/swinters/LightingHELLOs/HELLO1/tutorial4_no_lgts_v6.mb  </p>
</font></td></tr></tbody></table></pre>

*PYP NOTE:* This is similar to example 1 except that that we specifically tell it what we want to split and what we want to join together.  You will also notice that we can use this method to be very specific to what we want. It is also important to note that when spliting on strings, you may need want to be specific.  In the second part of the example 2 I specified splitting on "Project" and in those paths, there were two places that had "Project".  If you are wanting get just one of them you will need to be more specific.  By using "Projects" or "/Projects" you will narrow down the uniqueness of the string.   

*NOTE:  Also see String Replacements*

---+++ String Replacements

String replacements allows you to replace one string that is on the line and replace it with something else:

<pre><table width="820" align="left" style="background-color: #d6d6d6" height="150" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 1</b> - String Replacement</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $  cat /shots/psr/home/src/training/pyp/text_files/exercise_4 | pyp -r   "p.replace('tutorial','fake_list_')" </b></p>
<p>      /homedirs/swinters/LightingProjects/Project1/<b>fake_list_</b>4_1_no_lgts_v1.mb </p>
<p>      /homedirs/swinters/LightingProjects/Project1/<b>fake_list_</b>4_no_lgts_v6.mb </p>
<p><b>   $  cat /shots/psr/home/src/training/pyp/text_files/exercise_4 | pyp -r  "p.replace('tutorial','')" </b></p>
<p>      /homedirs/swinters/LightingProjects/Project1/4_1_no_lgts_v1.mb </p>
<p>      /homedirs/swinters/LightingProjects/Project1/4_no_lgts_v6.mb   </p>
</font></td></tr></tbody></table></pre>

*PYP NOTE:* As shown in the example, string replacement allows for string manipulation.  Like in the last section, you will need to be very careful what string you want to replace because it is very specific in the arguments.  You have the option to replace the string with nothing ***See Using Kill as another alternative*

---+++ Using %s

pyp has the ablity to use '%s' as a representation that strings will be used to add to each line.

<pre><table width="820" align="left" style="background-color: #d6d6d6" height="110" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 1</b> - String Addition</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $  echo 'Hello' | pyp; pyp -r  "'%s World'%p"  </b></p>
<p>      Hello </p>
<p>      <b>Hello World </b> </p>
</font></td></tr></tbody></table></pre>

*PYP NOTE:*  In this example we added 'World' to 'p'  to get 'Hello World'.  The reason why it printed out 'Hello' on one line and then 'Hello World' is because we setup two commands on the first line with a semi-colon.  The first command established what 'p' will become and the second added the string.  You will only need to %s when you are needing to specify a string variable in an already established string. When you want to identify the string variable you will need to use a '%' out side the string argument in which you originally setup.

 <pre><table width="820" align="left" style="background-color: #d6d6d6" height="210" border="0"><thead></thead><tbody><tr valign="top">
<td><font color="black" size="5"> <b>Example 2 </b> - Multiple String Additions</font>
<font color="black" style="line-height: 10%" size="4"> 
<p><b>   $  echo 'Computer' | pyp; pyp -r  "'Mr. %s, Do you want to see my %s '%(p,p)"  </b></p>
<p>      Computer </p>
<p>     <b> Mr. Computer, Do you want to see my Computer </b> </p>
<p><b>   $  echo 'Computer' | pyp; pyp -r  "'Mr. %s, Do you want to see my %s '%('Mac ' + p,p)"  </b></p>
<p>      Computer </p>
<p>     <b> Mr. Mac Computer, Do you want to see my Computer </b> </p>
<p><b>   $  echo 'Mac Computer' | pyp; pyp -r  "'Mr. %s, Do you want to see my %s '%(p,p.replace('Mac ',''))"  </b></p>
<p>      Computer </p>
<p>     <b> Mr. Mac Computer, Do you want to see my Computer </b> </p>
</font></td></tr></tbody></table></pre>

*PYP NOTE:*  If you are going to use multiple string variable, it will need to be surrounded by '()'.  Each variable is setup by the amount of string variables you established in your original string.  In our example we had two '%s' variables so we had '%(p,p)' to identify what the two variables will represent.  You also don't have to use 'p' everytime.  You can use variable like 's[2]' or $string + 'p' or $string or pyp actions (such as <b>replace,kill,split,join</b>).  As you can see almost anything can go when you need to establish what your string variable equals.  In our examples, we added a string to 'p' and we did a 'p.replace' to demonstrate pyp power.  


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages